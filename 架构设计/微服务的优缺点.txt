微服务架构采用Scale Cube方法设计应用架构，将应用服务按功能拆分成一组相互协作的服务。
每个服务负责一组特定、相关的功能。每个服务可以有自己独立的数据库，从而保证与其他服务解耦。


微服务优点
1、通过分解巨大单体式应用为多个服务方法解决了复杂性问题，每个微服务相对较小
2、每个单体应用不局限于固定的技术栈，开发者可以自由选择开发技术，提供API服务。
3、每个微服务独立的开发，部署
4、单一职责功能，每个服务都很简单，只关注于一个业务功能
5、易于规模化开发，多个开发团队可以并行开发，每个团队负责一项服务
6、改善故障隔离。一个服务宕机不会影响其他的服务


微服务缺点：
1.开发者需要应对创建分布式系统所产生的额外的复杂因素
l  目前的IDE主要面对的是单体工程程序，无法显示支持分布式应用的开发
l  测试工作更加困难
l  需要采用服务间的通讯机制
l  很难在不采用分布式事务的情况下跨服务实现功能
l  跨服务实现要求功能要求团队之间的紧密协作
2.部署复杂
3.内存占用量更高


内部服务之间的通信方式有两种：
1、基于HTTP协议的同步机制(REST、RPC);
2、基于消息队列的异步消息处理机制(AMQP-based message broker)。






微服务架构的好处
      1.单个服务很容易开发、理解和维护。
      2.这种架构使得每个服务都可以有专门开发团队来开发。
      3.微服务架构模式是每个微服务独立的部署。
      4.微服务架构模式使得每个服务独立扩展。
 
微服务架构的不足
      微服务应用是分布式系统，由此会带来固有的复杂性。
      服务地址目录，服务健康度，部署困难，服务依赖问题，数据库分区问题。




SOA是什么？SOA全英文是Service-Oriented Architecture，中文意思是面向服务编程，是一种思想，一种方法论，一种分布式的服务架构（具体可以百度）。
 用途：SOA解决多服务凌乱问题，SOA架构解决数据服务的复杂程度，同时SOA又有一个名字，叫做服务治理。
 原因：多个子系统直接相互交互，相互调用非常凌乱，这样我们就很不爽，所以我们就用到了我们的SOA架构，SOA又叫服务治理，SOA就是帮助我们把服务之间调用的乱七八糟的关系给治理起来，然后提供一个统一的标准，把我们的服务治理成下图所示，以前我们的服务是互相交互，现在是只对数据总线进行交互，这样系统就变得统一起来。

SOA的好处：
  1、降低用户成本，用户不需要关心各服务之间是什么语言的、不需要知道如果调用他们，只要通过统一标准找数据总线就可以了。
  2、程序之间关系服务简单
  3、识别哪些程序有问题（挂掉）

缺点：提示了系统的复杂程度，性能有相应影响。

数据总线是一个调度框架，每个服务需要根据约定向数据总线注册服务