 [转]如何做好一个程序员
每个IT企业，尤其是初创企业，非常苦恼：找不到好的程序员。现在大学、软件学院及各种培训机构，每年培养几十万的程序员，毕业的每个人都有同样困恼：找不到好的工作。问题出在哪里呢？其实，企业需要的是不是刚会写程序的人，需要来了就能干活的人，尤其能把活干好的人。而刚毕业的大学生多半刚学会如何写程序，的确很难企业需求。

企业到底需要什么样的程序员，一个刚入门的程序员如何成为企业需要的高手呢？还有很多程序员问我，“我需要具备什么样的能力就可以去创业？”我一直在琢磨类似的问题。我自己写过十年程序，也在金山管理过一千多人的研发队伍，最近也在做天使投资，仔细总结了如下五点建议与所有程序员分享。

建议一、只有真正喜欢才能写好程序

喜欢写程序，做程序员就是上天堂；

不喜欢写程序，做程序员就是下地狱。

程序员需要整天趴在电脑前，经常没日没夜的，非常辛苦，而且工作来不得半点虚假，少写一个标点符号都不行。喜欢的人，日子过得非常开心，每写一行代码，都会有新的成就，尤其当自己的作品被广泛应用的时候，那种自豪感油然而起。不喜欢的人，坐在电脑前极端无聊，被进度压得喘不过气来，天天为找bug改bug生气。

只有喜欢，只有热爱，才能把程序写好！

我建议不喜欢写程序的人早点转行，不要勉强自己，免得误人误己。

建议二、把程序当艺术品，象写诗一样来写代码

现在很少有公司做 codeview （对写好的程序做代码级检查），于是很多人在进度的压力下潦草应付，只要测试通过就算搞定。表面上看，开发速度很快，进度有保障；但实际上，这样的程序连开发者自己都很难读懂，一旦有bug，很难调试，将来维护升级都非常困难。这样的代码多半只能重写，浪费自然严重。

如果每个人写程序的时候当艺术品来写，写每行都认认真真、干干净净的，虽然速度略微慢了一点，但综合的开发成本会低很多。

如何写象诗一样美的代码呢？方法也很简单。

一、买几本经典的编程书，把书上所有例程全部重新写一遍，逐个比较和书上范例的差距，一步一步改善自己编程的风格和技巧。时间长了，自然就能写出象书上例程一样的代码，甚至可以比书上写得好。

二、基础扎实后，多看看Linux 等系统级的源代码，看看高手是如何写的，就有感觉了。

三、通读一下MSDN中所有的资料，这样，“读书破万卷，下笔如有神”。

还有，一定要牢记软件工程的铁律：可能出错的地方一定会出错。每个变量都做初始化，引用每个参数都会做有效性检查，在可能出错的每个地方都会做边界条件检查，这样开发出来的程序一定会稳固很多，就是出错也会很容易修改。野路子出来的高手，一般开发速度很快，但做完后bug很多，经常需要很长时间修改。而真正的高手，追求的境界是 bugfree code（零缺陷代码）。




  不知不觉做软件已经做了十年，有成功的喜悦，也有失败的痛苦，但总不敢称自己是高手，因为和我心目中真正的高手们比起来，还差的太远。世界上并没有成为高手的捷径，但一些基本原则是可以遵循的。 

　　1. 扎实的基础。数据结构、离散数学、编译原理，这些是所有计算机科学的基础，如果不掌握他们，很难写出高水平的程序。据我的观察，学计算机专业的人比学其他专业的人更能写出高质量的软件。程序人人都会写，但当你发现写到一定程度很难再提高的时候，就应该想想是不是要回过头来学学这些最基本的理论。不要一开始就去学OOP，即使你再精通OOP，遇到一些基本算法的时候可能也会束手无策。 

　　2. 丰富的想象力。不要拘泥于固定的思维方式，遇到问题的时候要多想几种解决问题的方案，试试别人从没想过的方法。丰富的想象力是建立在丰富的知识的基础上，除计算机以外，多涉猎其他的学科，比如天文、物理、数学等等。另外，多看科幻电影也是一个很好的途径。 

　　3. 最简单的是最好的。这也许是所有科学都遵循的一条准则，如此复杂的质能互换原理在爱因斯坦眼里不过是一个简单得不能再简单的公式：E=mc2。简单的方法更容易被人理解，更容易实现，也更容易维护。遇到问题时要优先考虑最简单的方案，只有简单方案不能满足要求时再考虑复杂的方案。 

　　4. 不钻牛角尖。当你遇到障碍的时候，不妨暂时远离电脑，看看窗外的风景，听听轻音乐，和朋友聊聊天。当我遇到难题的时候会去玩游戏，而且是那种极暴力的打斗类游戏，当负责游戏的那部分大脑细胞极度亢奋的时候，负责编程的那部分大脑细胞就得到了充分的休息。当重新开始工作的时候，我会发现那些难题现在竟然可以迎刃而解。 

　　5. 对答案的渴求。人类自然科学的发展史就是一个渴求得到答案的过程，即使只能知道答案的一小部分也值得我们去付出。只要你坚定信念，一定要找到问题的答案，你才会付出精力去探索，即使最后没有得到答案，在过程中你也会学到很多东西。 

　　6. 多与别人交流。三人行必有我师，也许在一次和别人不经意的谈话中，就可以迸出灵感的火花。多上上网，看看别人对同一问题的看法，会给你很大的启发。 

　　7. 良好的编程风格。注意养成良好的习惯，代码的缩进编排，变量的命名规则要始终保持一致。大家都知道如何排除代码中错误，却往往忽视了对注释的排错。注释是程序的一个重要组成部分，它可以使你的代码更容易理解，而如果代码已经清楚地表达了你的思想，就不必再加注释了，如果注释和代码不一致，那就更加糟糕。 

　　8. 韧性和毅力。这也许是"高手"和一般程序员最大的区别。A good programming is 99 weat and 1?ffee。高手们并不是天才，他们是在无数个日日夜夜中磨练出来的。成功能给我们带来无比的喜悦，但过程却是无比的枯燥乏味。你不妨做个测试，找个10000以内的素数表，把它们全都抄下来，然后再检查三遍，如果能够不间断地完成这一工作，你就可以满足这一条。 




作一个真正合格的程序员，应该具有的素质。 

1：团队精神和协作能力 

团队精神和写作能力是作为一个程序员应具备的最基本的素质。软件工程已经提了将近三十年了，当今的软件开发已经不是编程了，而是工程。独行侠可以写一些程序也能赚钱发财，但是进入研发团队，从事商业化和产品化的开发任务，就必须具备这种素质。可以毫不夸张的说这种素质是一个程序员乃至一个团队的安身立命之本。 

2：文档习惯 

文档是一个软件系统的生命力。一个公司的产品再好、技术含量再高，如果没有缺乏文档，知识就没有继承，公司还是一个来料加工的软件作坊。作为代码程序员，必须将30％的工作时间写用于技术文档。没有文档的程序员势必会被淘汰。 

3：规范化的代码编写习惯 

知名软件公司的代码的变量命名、注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都有明确规定，良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同技术人员之间的协作。 一些所谓的高手甚至叫嚣高手写的代码一般人看不懂，我只能说他不是一名合格的程序员。 

4：需求理解能力 

程序员要能正确理解任务单中描述的需求。在这里要明确一点，程序员不仅仅要注意到软件的功能需求，还应注意软件的性能需求，要能正确评估自己的模块对整个项目中的影响及潜在的威胁，如果有着两到三年项目经验的熟练程序员对这一点没有体会的话，只能说明他或许是认真工作过，但是没有用心工作。 

5：模块化思维能力 

作为一个优秀的程序员，他的思想不能在局限当前的工作任务里面，要想想看自己写的模块是否可以脱离当前系统存在，通过简单的封装在其他系统中或其他模块中直接使用。这样做可以使代码能重复利用，减少重复的劳动，也能是系统结构越趋合理。模块化思维能力的提高是一个程序员的技术水平提高的一项重要指标。 

6：测试习惯 

测试是软件工程质量保证的重要环节，但是测试不仅仅是测试工程师的工作，而是每个程序员的一种基本职责。程序员要认识测试不仅是正常的程序调试，而要是要进行有目的有针对性的异常调用测试，这一点要结合需求理解能力。 

7：学习和总结的能力 

程序员是很容易被淘汰的职业，所以要善于学习总结。许多程序员喜欢盲目追求一些编码的小技巧，这样的技术人员无论学了多少语言，代码写起来多熟练，我们只能说他是一名熟练的代码民工，他永远都不会有质的提高。一个善于学习的程序员会经常总结自己的技术水平，对自己的技术层面要有良好的定位，这样才能有目的地提高自己。这样才能逐步提高，从程序员升级为软件设计师、系统分析员、项目经理。 

作为高级程序员，乃至于设计师而言，除了应该具备上述全部素质之外，还需要具备以下素质： 

1、 需求分析能力 

2、 整体框架能力 

3、 流程处理能力 

4、 模块分解能力 

5、 整体项目评估能力 

6、 团队组织管理能力