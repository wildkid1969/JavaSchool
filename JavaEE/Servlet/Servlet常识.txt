1、servlet容器如何处理请求资源路径?

比如，在浏览器地址栏输入
http://ip:port/web04/abc.html

请求资源路径是:/web04/abc.html


step1,容器依据应用名找到应用所在的文件夹。


step2,容器会假设要访问的是一个servlet,会比较
web.xml文件中<url-pattern>是否与"/abc.html"一致:

a,精确匹配：

b,通配符匹配：使用"*"来匹配任意的字符。

比如<url-pattern>/*</url-pattern>

/aaa/aaa.bbb/aaa/bbb/ccc

c,后缀匹配：使用"*."开头，后接任意的字符。

比如<url-pattern>*.do</url-pattern>

会匹配所有以".do"结尾的请求。

/adfasdfasd.do


step3,如果都不匹配，容器会查找静态页面，如果找到，就返回，找不到，返回404。



2、如何让一个servlet处理多种请求?


step1,使用后缀匹配模式。


step2,分析请求资源路径，然后分别处理：

String uri=request.getRequestURI();


3、servlet的生命周期

(1)什么是servlet的生命周期

指的是容器如何创建servlet对象，如何分配其资源，如果
调用其方法来处理请求以及如何销毁servlet对象的整个过程。

(2)生命周期分成哪几个阶段:

1)实例化:

a,容器调用servlet的构造器，创建一个servlet实例。
b,什么时候实例化?
情况1：只有请求到达容器之后，容器才会创建。情况2:容器启动之后，会立即创建servlet实例,
该servlet必须要配置load-on-startup参数。

2)初始化:

a,容器在将servlet实例化之后，会立即调用其
init(ServletConfigconfig)方法。

b,init方法只会执行一次

c,容器在调用init方法之前，会先创建一个符合ServletConfig接口要求的对象，然后再把该对象作为参数传过init方法。
d,GenericServlet已经实现了init方法(将Servlet
Config对象保存下来了)。

e,初始化参数:
step1,使用<init-param>配置初始化参数step2,使用ServletConfig提供的getInitParameter方法来访问。

f,如果要实现自已的初始化处理逻辑，建议override
init()方法。
3)就绪:

a,servlet容器在收到请求之后，会调用servlet对象的service方法来处理请求。

b,HttpServlet已经实现了service方法，该方法依据请求类型分别调用doGet,doPost方法。

c,写一个servlet，可以选择overrideHttpServlet的
doGet,doPost方法或者overrideHttpServlet的service
方法。

4)销毁：

a,容器在删除servlet对象之前，会调用其destroy方法。
b,容器会使用自身的算法来决定何时销毁servlet对象。
c,可以在destroy方法里面编写释放资源的代码。
d,destroy方法只会执行一次。

(3)相关的几个接口与类

a,Servlet接口
init(ServletConfigconfig):初始化
service(ServletRequestreq,ServletResponseres):就绪
destory():销毁

b,GenericServlet抽象类实现了Servlet接口中的部分方法，主要是实现了init,destroy方法。

c,HttpServlet抽象类继承了GenericServlet,主要是实现了service方法。
d,ServletConfig接口
e,ServletRequest接口是HttpServletRequest
接口的父接口。

f,ServletResponse接口是HttpServletResponse
接口的父接口。



4、将中文插入mysql数据库：


step1,保证应用程序能够正确获得中文
	
request.setCharacterEncoding("utf-8");
			response.setContentType("text/html;charset=utf-8");
		

html:<metahttp-equiv="content-type"content="text/html;charset=utf-8">
			jsp:<%@pagepageEncoding="utf-8"contentType="text/html;charset=utf-8"%>
			<%@pageimport="java.util.*,entity.*"%>


step2,建库语句
			jdbc:mysql://localhost:3306/lure2008?useUnicode=true&characterEncoding=utf8

告诉jdbc驱动，在输出时，使用utf-8这种编码格式进行编码。



网站推荐：（开源）
	www.github.com
	www.sourceforge.net
	www.apache.org














